# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
#       - name: Set up JDK 11
#         uses: actions/setup-java@v3
#         with:
#           java-version: 11
#           distribution: 'zulu' # Alternative distribution options are available.
     
#       - name: Setup .NET
#         uses: actions/setup-dotnet@v3
#         with:
#           dotnet-version: 7.0.x
          
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
#       - name: Cache SonarCloud packages
#         uses: actions/cache@v3
#         with:
#           path: ~\sonar\cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar

#       - name: Cache SonarCloud scanner
#         id: cache-sonar-scanner
#         uses: actions/cache@v3
#         with:
#           path: ./.sonar/scanner
#           key: ${{ runner.os }}-sonar-scanner
#           restore-keys: ${{ runner.os }}-sonar-scanner

#       - name: Install SonarCloud scanner
#         if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
#         shell: pwsh
#         run: |
#           New-Item -Path ./.sonar/scanner -ItemType Directory
#           dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

#       - name: Install dotnet coverage tool
#         run: |
#           dotnet tool install --global dotnet-coverage

#       - name: Restore dependencies
#         run: dotnet restore ./src/ProjectManagement.Company.Api/

#       - name: Build
#         run: dotnet build ./src/ProjectManagement.Company.Api/ -c Release --no-restore
        
#       - name: Build and analyze
#         env:
#           GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # Needed to get PR information, if any
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         shell: pwsh
#         run: |
#           .\.sonar\scanner\dotnet-sonarscanner begin /k:"afroze9_dotnet-projectmanagement-company-api" /o:"afroze9-main" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
#           dotnet build ./src/ProjectManagement.Company.Api/ -c Release --no-restore
#           dotnet-coverage collect 'dotnet test ./tests/ProjectManagement.Company.Api.UnitTests/ -s ./tests/ProjectManagement.Company.Api.UnitTests/.runsettings' -f xml  -o 'coverage.xml'
#           .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.5.0

      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4.0.0
        with:
          file: src/ProjectManagement.Company.Api/Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/dpm-company-api:latest
          push: true
#           cache-from: 'type=registry,ref=dpm-company-api/server:buildcache'
#           cache-to: 'type=registry,ref=dpm-company-api/server:buildcache,mode=max'
